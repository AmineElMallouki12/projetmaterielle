#!/usr/bin/env python3
"""
Script de configuration de la base de donn√©es MongoDB
pour le syst√®me de gestion d'inventaire Flask
"""

from pymongo import MongoClient
from bson.objectid import ObjectId
import bcrypt
from datetime import datetime

def setup_database():
    """Configure la base de donn√©es MongoDB avec les utilisateurs et donn√©es par d√©faut"""
    
    try:
        # Connexion √† MongoDB
        print("üîå Connexion √† MongoDB...")
        client = MongoClient('mongodb://localhost:27017/')
        
        # Cr√©er/acc√©der √† la base de donn√©es
        db = client['inventory_db']
        print("‚úÖ Base de donn√©es 'inventory_db' accessible")
        
        # Cr√©er les collections
        collections = ['users', 'equipment', 'rental_requests']
        for collection_name in collections:
            if collection_name not in db.list_collection_names():
                db.create_collection(collection_name)
                print(f"‚úÖ Collection '{collection_name}' cr√©√©e")
            else:
                print(f"‚ÑπÔ∏è  Collection '{collection_name}' existe d√©j√†")
        
        # Cr√©er les utilisateurs par d√©faut
        setup_default_users(db)
        
        # Cr√©er des √©quipements d'exemple
        setup_sample_equipment(db)
        
        print("\nüéâ Configuration de la base de donn√©es termin√©e avec succ√®s!")
        print("\nüë• Utilisateurs cr√©√©s:")
        print("   ‚Ä¢ Admin: admin / admin123")
        print("   ‚Ä¢ Technicien: technicien / tech123")
        print("   ‚Ä¢ Professeur: professeur / prof123")
        print("   ‚Ä¢ √âtudiant: etudiant / etud123")
        print("\nüåê Acc√©dez √† l'application sur: http://127.0.0.1:5000")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration: {e}")
        print("\nüîß V√©rifiez que:")
        print("   1. MongoDB est d√©marr√©")
        print("   2. MongoDB est accessible sur localhost:27017")
        print("   3. Vous avez les permissions n√©cessaires")

def setup_default_users(db):
    """Cr√©e les utilisateurs par d√©faut avec des r√¥les diff√©rents"""
    
    users_collection = db['users']
    
    # V√©rifier si des utilisateurs existent d√©j√†
    if users_collection.count_documents({}) > 0:
        print("‚ÑπÔ∏è  Des utilisateurs existent d√©j√†, passage de la cr√©ation...")
        return
    
    # D√©finir les utilisateurs par d√©faut
    default_users = [
        {
            'username': 'admin',
            'password': bcrypt.hashpw('admin123'.encode('utf-8'), bcrypt.gensalt()),
            'role': 'admin',
            'email': 'admin@example.com',
            'created_at': datetime.now(),
            'is_active': True
        },
        {
            'username': 'technicien',
            'password': bcrypt.hashpw('tech123'.encode('utf-8'), bcrypt.gensalt()),
            'role': 'technicien laboratoire',
            'email': 'technicien@example.com',
            'created_at': datetime.now(),
            'is_active': True
        },
        {
            'username': 'professeur',
            'password': bcrypt.hashpw('prof123'.encode('utf-8'), bcrypt.gensalt()),
            'role': 'professeur',
            'email': 'professeur@example.com',
            'created_at': datetime.now(),
            'is_active': True
        },
        {
            'username': 'etudiant',
            'password': bcrypt.hashpw('etud123'.encode('utf-8'), bcrypt.gensalt()),
            'role': 'etudiant',
            'email': 'etudiant@example.com',
            'created_at': datetime.now(),
            'is_active': True
        }
    ]
    
    # Ins√©rer les utilisateurs
    result = users_collection.insert_many(default_users)
    print(f"‚úÖ {len(result.inserted_ids)} utilisateurs cr√©√©s")

def setup_sample_equipment(db):
    """Cr√©e des √©quipements d'exemple pour tester le syst√®me"""
    
    equipment_collection = db['equipment']
    
    # V√©rifier si des √©quipements existent d√©j√†
    if equipment_collection.count_documents({}) > 0:
        print("‚ÑπÔ∏è  Des √©quipements existent d√©j√†, passage de la cr√©ation...")
        return
    
    # √âquipements d'exemple
    sample_equipment = [
        {
            'id': 'ITEM_001',
            'designation': 'Ordinateur portable HP',
            'category': 'Informatique',
            'marque': 'HP',
            'modele': 'Pavilion 15',
            'n_serie': 'HP123456789',
            'ancien_cab': 'CAB001',
            'nouveau_cab': 'CAB001',
            'date_inv': '2024-01-15',
            'quantite_totale': 5,
            'quantite_disponible': 3,
            'quantite_cass√©e': 1,
            'quantite_en_r√©paration': 1,
            'quantite_indisponible': 0,
            'quantite_perdue': 0,
            'status': 'Disponible',
            'condition': 'Bon √©tat',
            'description': 'Ordinateurs portables pour les √©tudiants en informatique',
            'image': '',
            'created_at': datetime.now(),
            'updated_at': datetime.now()
        },
        {
            'id': 'ITEM_002',
            'designation': 'Microscope optique',
            'category': 'Laboratoire',
            'marque': 'Olympus',
            'modele': 'CX23',
            'n_serie': 'OLY789456123',
            'ancien_cab': 'CAB002',
            'nouveau_cab': 'CAB002',
            'date_inv': '2024-01-20',
            'quantite_totale': 10,
            'quantite_disponible': 8,
            'quantite_cass√©e': 1,
            'quantite_en_r√©paration': 1,
            'quantite_indisponible': 0,
            'quantite_perdue': 0,
            'status': 'Disponible',
            'condition': 'Bon √©tat',
            'description': 'Microscopes pour les cours de biologie',
            'image': '',
            'created_at': datetime.now(),
            'updated_at': datetime.now()
        },
        {
            'id': 'ITEM_003',
            'designation': 'Projecteur vid√©o',
            'category': 'Audiovisuel',
            'marque': 'Epson',
            'modele': 'EB-X41',
            'n_serie': 'EPS456789123',
            'ancien_cab': 'CAB003',
            'nouveau_cab': 'CAB003',
            'date_inv': '2024-01-25',
            'quantite_totale': 3,
            'quantite_disponible': 2,
            'quantite_cass√©e': 0,
            'quantite_en_r√©paration': 1,
            'quantite_indisponible': 0,
            'quantite_perdue': 0,
            'status': 'Disponible',
            'condition': 'Bon √©tat',
            'description': 'Projecteurs pour les salles de cours',
            'image': '',
            'created_at': datetime.now(),
            'updated_at': datetime.now()
        }
    ]
    
    # Ins√©rer les √©quipements
    result = equipment_collection.insert_many(sample_equipment)
    print(f"‚úÖ {len(result.inserted_ids)} √©quipements d'exemple cr√©√©s")

def create_indexes(db):
    """Cr√©e des index pour optimiser les performances"""
    
    try:
        # Index sur les collections
        db.users.create_index('username', unique=True)
        db.users.create_index('email', unique=True)
        db.equipment.create_index('id', unique=True)
        db.equipment.create_index('category')
        db.equipment.create_index('status')
        db.rental_requests.create_index('user_name')
        db.rental_requests.create_index('status')
        db.rental_requests.create_index('created_at')
        
        print("‚úÖ Index cr√©√©s pour optimiser les performances")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la cr√©ation des index: {e}")

if __name__ == '__main__':
    print("üöÄ Configuration de la base de donn√©es MongoDB")
    print("=" * 50)
    
    setup_database()
    
    print("\n" + "=" * 50)
    print("‚úÖ Script termin√©!")
